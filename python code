from pdfminer.pdfparser import PDFParser
from pdfminer.pdfdocument import PDFDocument
from pdfminer.pdftypes import resolve1
from pdfminer.psparser import PSLiteral, PSKeyword
from pdfminer.utils import decode_text

from openpyxl import Workbook
wb = Workbook()

#data = {}  #if you want a dict of the data

linktoPDF="C:\pdfwithTableData.pdf"   #need .pdf path here
linktoOutputFolder="C:\output.xlsx"  #need .xlsx path here

ws = wb.active
# add more cols here if needed
ws['A1'] = "col A name"
ws["B1"]= "col B name"
columnA=2    #will need to add if you want more columns of data, starts at row 2 to keep headers
columnB=2

def decode_value(value):

    # decode PSLiteral, PSKeyword
    if isinstance(value, (PSLiteral, PSKeyword)):
        value = value.name

    # decode bytes
    if isinstance(value, bytes):
        value = decode_text(value)
    return value

with open(linktoPDF, 'rb') as fp:
    parser = PDFParser(fp)

    doc = PDFDocument(parser)
    res = resolve1(doc.catalog)

    if 'AcroForm' not in res:
        raise ValueError("No AcroForm Found")

    fields = resolve1(doc.catalog['AcroForm'])['Fields']  # may need further resolving

    for f in fields:
        field = resolve1(f)
        name, values = field.get('T'), field.get('V')
        name = decode_text(name)
        values = resolve1(values)

        if isinstance(values, list):
            values = [decode_value(v) for v in values]
        else:
            values = decode_value(values)
        #data.update({name: values})  #if you want a dict of the data

        if name.startswith("Des"):  #will need to add "if's" for more columns
            ws['A'+str(columnA)] = values
            columnA+=1
        elif name.startswith("Part"):
            ws['B'+str(columnB)] = values
            columnB+=1

wb.save(linktoOutputFolder)    
